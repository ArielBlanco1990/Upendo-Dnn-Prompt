<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ErrorOccurred.Text" xml:space="preserve">
    <value>An error occurred. Please check the log files to find and resolve the issue.</value>
  </data>
  <data name="ModuleHelp.Text" xml:space="preserve">
    <value>&lt;p&gt;No information at this time.&lt;/p&gt;</value>
  </data>
  <data name="PopupsDisabled.Text" xml:space="preserve">
    <value>Popups have been disabled for {0}.</value>
  </data>
  <data name="PopupsEnabled.Text" xml:space="preserve">
    <value>Popups have been enabled for {0}.</value>
  </data>
  <data name="PromptPopupsMode.Text" xml:space="preserve">
    <value>Allows you to enable/disable the popup editing feature on the current website or all sites in this installation. </value>
  </data>
  <data name="Prompt_ModeInvalid.Text" xml:space="preserve">
    <value>The mode can only be 'enable' or 'disable'. The default is 'disable'.</value>
  </data>
  <data name="Prompt_PopupsMode_FlagMode.Text" xml:space="preserve">
    <value>Specify whether you want to enable or disable the popups on the specified site(s). Acceptable values include 'enable' and 'disable'.  </value>
  </data>
  <data name="Prompt_PopupsMode_FlagScope.Text" xml:space="preserve">
    <value>Specify whether you want to apply this to only the current site, or all sites. The accepted values include 'current' and 'all'.</value>
  </data>
  <data name="Prompt_PopupsMode_ResultHtml.Text" xml:space="preserve">
    <value>&lt;div&gt;
	&lt;h4&gt;Enable or disable popups on the current or all sites&lt;/h4&gt;
	
	&lt;code class="block"&gt;popups-mode [--mode &amp;lt;enable|disable&amp;gt;] [--scope &amp;lt;current|all&amp;gt;]&lt;/code&gt;
	&lt;p&gt;Popups have been [enabled/disabled] for [this site/all sites].&lt;/p&gt;
	&lt;p&gt;Note:  If you don't enter any command arguments, you'll simply disable popups on the current website only.&lt;/p&gt;
&lt;/div&gt;</value>
  </data>
  <data name="Prompt_ScopeInvalid.Text" xml:space="preserve">
    <value>The scope can only be 'all' or 'current'. Omitting it will default to 'current'.</value>
  </data>
  <data name="ScopeAll.Text" xml:space="preserve">
    <value>all sites</value>
  </data>
  <data name="ScopeCurrent.Text" xml:space="preserve">
    <value>the current site only</value>
  </data>
  <data name="Welcome.Text" xml:space="preserve">
    <value>Thank you for using Upendo Prompt. There is no reason to place this module on a page at this time, but it may be necessary in the future.</value>
  </data>
</root>