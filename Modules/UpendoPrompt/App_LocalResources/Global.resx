<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DebugDisabled.Text" xml:space="preserve">
    <value>Debugging is disabled throughout the site. </value>
  </data>
  <data name="DebugEnabled.Text" xml:space="preserve">
    <value>Debugging is enabled in one or more of the debugging areas. You should consider turning it off if this is not expected. </value>
  </data>
  <data name="DebugOff.Text" xml:space="preserve">
    <value>Debugging has been turned off in all areas of the site.</value>
  </data>
  <data name="DebugOn.Text" xml:space="preserve">
    <value>Debugging has been enabled throughout the site. All visitors will experience slow page loads for the next few moments. </value>
  </data>
  <data name="DebugStatusHost.Text" xml:space="preserve">
    <value>Debugging in the Host Settings is {0}.</value>
  </data>
  <data name="DebugStatusLog4net.Text" xml:space="preserve">
    <value>Debugging in the Log4Net logging is {0}.</value>
  </data>
  <data name="DebugStatusWebConfig.Text" xml:space="preserve">
    <value>Debugging in the web.config is {0}.</value>
  </data>
  <data name="Deprecated.Text" xml:space="preserve">
    <value>This command has been deprecated. Please use '{0}' instead. This command will be removed in a future release.</value>
  </data>
  <data name="Disabled.Text" xml:space="preserve">
    <value>disabled</value>
  </data>
  <data name="Enabled.Text" xml:space="preserve">
    <value>enabled</value>
  </data>
  <data name="ErrorOccurred.Text" xml:space="preserve">
    <value>An error occurred. Please check the log files to find and resolve the issue.</value>
  </data>
  <data name="Impersonate.Text" xml:space="preserve">
    <value>Allows you as a superuser to impersonate another user account by either Username or UserID.</value>
  </data>
  <data name="ModuleHelp.Text" xml:space="preserve">
    <value>&lt;p&gt;No information at this time.&lt;/p&gt;</value>
  </data>
  <data name="PopupDisabled.Text" xml:space="preserve">
    <value>Popups have been disabled for {0}.</value>
  </data>
  <data name="PopupEnabled.Text" xml:space="preserve">
    <value>Popups have been enabled for {0}.</value>
  </data>
  <data name="PromptDebugInfo.Text" xml:space="preserve">
    <value>Displays the debug details for the primary 3 debugging locations. </value>
  </data>
  <data name="PromptDebugMode.Text" xml:space="preserve">
    <value>Allows you to turn on debugging in your site. This method enables debugging in the web.config, site settings, and the Log4Net configuration file.</value>
  </data>
  <data name="PromptListPackages.Text" xml:space="preserve">
    <value>This command allows you to list and see the extension packages that have been saved in the `/App_Data/ExtensionPackages/` folder.</value>
  </data>
  <data name="PromptPopupMode.Text" xml:space="preserve">
    <value>Allows you to enable/disable the popup editing feature on the current website or all sites in this installation. </value>
  </data>
  <data name="PromptThemeseUsed.Text" xml:space="preserve">
    <value>This command allows you to see all of the themes that currently are used by one or more pages, modules, and other settings.</value>
  </data>
  <data name="Prompt_DebugInfo_ResultHtml.Text" xml:space="preserve">
    <value>&lt;div&gt;
        &lt;p&gt;Helps you see and know where debugging might already be turned on. This is helpful when you're not sure or have multiple people working on a site.&lt;/p&gt;
        &lt;h4&gt;Toggle whether the site is in debug mode, or running normally&lt;/h4&gt;
        &lt;code class="block"&gt;list-debug&lt;/code&gt;
        &lt;p&gt;This command does not have any options.&lt;/p&gt;
        &lt;p&gt;If you find that one or more areas have debug turned on, you should use the command below to disable debug mode. You may need to run it twice.&lt;/p&gt;
        &lt;code class="block"&gt;set-debug&lt;/code&gt;
    &lt;/div&gt;</value>
  </data>
  <data name="Prompt_DebugMode_ResultHtml.Text" xml:space="preserve">
    <value>&lt;div&gt;
        &lt;p&gt;When you need more information to help diagnose and resolve an error, this command can help you get more verbose and detailed information.&lt;/p&gt;
        &lt;p&gt;&lt;strong&gt;WARNING!&lt;/strong&gt; When used, this command will RESTART your website. Page loads for the next few moments after running this command will be slower.&lt;/p&gt;
        &lt;h4&gt;Using set-debug&lt;/h4&gt;
        &lt;code class="block"&gt;set-debug&lt;/code&gt;
        &lt;p&gt;This command does not have any options.&lt;/p&gt;
        &lt;p&gt;When you run this command, debug mode is toggled in the superuser settings, web.config, and the DotNetNuke.log4net.config files.&lt;/p&gt;
        &lt;p&gt;If you're unsure if you need to run this command, first try running the command below.&lt;/p&gt;
        &lt;code class="block"&gt;list-debug&lt;/code&gt;
    &lt;/div&gt;</value>
  </data>
  <data name="Prompt_ImpersonateFlagsInvalid.Text" xml:space="preserve">
    <value>You must either specify a valid UserID -OR- Username value to impersonate another user account. Both were empty. Please only specify one.</value>
  </data>
  <data name="Prompt_ImpersonateNotAuthorized.Text" xml:space="preserve">
    <value>This user account is not authorized to perform this action. </value>
  </data>
  <data name="Prompt_ImpersonateNoUserFound.Text" xml:space="preserve">
    <value>No user account was found matching your query. Please check the UserID or Username you entered for accuracy and try again. </value>
  </data>
  <data name="Prompt_ImpersonateSuccess.Text" xml:space="preserve">
    <value>Impersonation was successful. Please refresh the page. </value>
  </data>
  <data name="Prompt_Impersonate_FlagUserID.Text" xml:space="preserve">
    <value>The `userid` flag allows you to specify a user account to impersonate by entering their UserID.  This flag should be used by itself. </value>
  </data>
  <data name="Prompt_Impersonate_FlagUsername.Text" xml:space="preserve">
    <value>The `username` flag allows you to specify a user account to impersonate by entering their username. This flag should be used by itself. </value>
  </data>
  <data name="Prompt_Impersonate_ResultHtml.Text" xml:space="preserve">
    <value>&lt;div&gt;
        &lt;p&gt;Impersonation is a userful tool to use to help diagnose and troubleshoot issues on a website. This command allows you to do this. After running this command, you will be redirected to the website homepage, but logged in as the user account you specified. This may or may not work with non-DNN authentication providers.&lt;/p&gt;
        &lt;h4&gt;Using impersonate&lt;/h4&gt;
        &lt;code class="block"&gt;impersonate&lt;/code&gt;
        &lt;p&gt;This command has two flags that you need to be aware of. The `username` must be a string value that exactly matches a valid username on the same site (portal).  The `userid` must also be a valid UserID, on the same site (portal).&lt;/p&gt;
        &lt;p&gt;Example using the `username` flag:&lt;/p&gt;
        &lt;code class="block"&gt;impersonate --username supersecretusername&lt;/code&gt;
        &lt;p&gt;Example using the `userid` flag:&lt;/p&gt;
        &lt;code class="block"&gt;impersonate --userid 1234&lt;/code&gt;
        &lt;h4&gt;Output&lt;/p&gt;
        &lt;p&gt;If successful, you will see the message below and a log entry will be added to the event log (a.k.a., Admin Logs).&lt;/p&gt;
        &lt;code class="block"&gt;Impersonation was successful. Please refresh the page.&lt;/code&gt;
    &lt;/div&gt;</value>
  </data>
  <data name="Prompt_ListPackages_ResultHtml.Text" xml:space="preserve">
    <value>&lt;div&gt;
        &lt;p&gt;Newer versions of DNN saves any installed extension into the `/App_Data/ExtensionPackages/` folder. This is meant to be used with the site import/export feature. Using this command will allow you to view the files in that folder in alphabetical order.&lt;/p&gt;
        &lt;h4&gt;Using list-packages&lt;/h4&gt;
        &lt;code class="block"&gt;list-packages&lt;/code&gt;
        &lt;p&gt;This command does not have any flags&lt;/p&gt;
        &lt;code class="block"&gt;list-packages&lt;/code&gt;
        &lt;h4&gt;Output&lt;/p&gt;
        &lt;p&gt;If successful, you will see an alphabetized listing of the packages found in that folder, along with a message stating that there were records found or not.&lt;/p&gt;
        &lt;p&gt;Records Found:&lt;/p&gt;
        &lt;code class="block"&gt;Maches were found for your query.&lt;/code&gt;
        &lt;p&gt;No Records Found:&lt;/p&gt;
        &lt;code class="block"&gt;No matches were found for your query.&lt;/code&gt;
    &lt;/div&gt;</value>
  </data>
  <data name="Prompt_ModeInvalid.Text" xml:space="preserve">
    <value>The mode can only be 'enable' or 'disable'. The default is 'disable'.</value>
  </data>
  <data name="Prompt_PopupMode_FlagMode.Text" xml:space="preserve">
    <value>Specify whether you want to enable or disable the popups on the specified site(s). Acceptable values include 'enable' and 'disable'.  </value>
  </data>
  <data name="Prompt_PopupMode_FlagScope.Text" xml:space="preserve">
    <value>Specify whether you want to apply this to only the current site, or all sites. The accepted values include 'current' and 'all'.</value>
  </data>
  <data name="Prompt_PopupMode_ResultHtml.Text" xml:space="preserve">
    <value>&lt;div&gt;
	&lt;h4&gt;Enable or disable popups on the current or all sites&lt;/h4&gt;
	
	&lt;code class="block"&gt;set-popups [--mode &amp;lt;enable|disable&amp;gt;] [--scope &amp;lt;current|all&amp;gt;]&lt;/code&gt;
	&lt;p&gt;Popups have been [enabled/disabled] for [this site/all sites].&lt;/p&gt;
	&lt;p&gt;Note:  If you don't enter any command arguments, you'll simply disable popups on the current website only.&lt;/p&gt;
&lt;/div&gt;</value>
  </data>
  <data name="Prompt_ScopeInvalid.Text" xml:space="preserve">
    <value>The scope can only be 'all' or 'current'. Omitting it will default to 'current'.</value>
  </data>
  <data name="Prompt_ThemesUsed_ResultHtml.Text" xml:space="preserve">
    <value>&lt;div&gt;
        &lt;p&gt;Ideally, this list should be as short as possible on most websites.&lt;/p&gt;
        &lt;p&gt;View all of the theme settings used on the entire DNN instance&lt;/p&gt;
        &lt;h4&gt;Using list-themes&lt;/h4&gt;
        &lt;code class="block"&gt;list-themes&lt;/code&gt;
        &lt;p&gt;A listing of all of the themes that have been specified in the superuser settings, site settings, pages, and modules will be listed.&lt;/p&gt;
    &lt;/div&gt;</value>
  </data>
  <data name="Prompt_UserImpersonated.Text" xml:space="preserve">
    <value>{0} has chosen to impersonate {1}.</value>
  </data>
  <data name="RecordsNone.Text" xml:space="preserve">
    <value>No matches were found for your query.</value>
  </data>
  <data name="RecordsSome.Text" xml:space="preserve">
    <value>Maches were found for your query.</value>
  </data>
  <data name="ScopeAll.Text" xml:space="preserve">
    <value>all sites</value>
  </data>
  <data name="ScopeCurrent.Text" xml:space="preserve">
    <value>the current site only</value>
  </data>
  <data name="Welcome.Text" xml:space="preserve">
    <value>Thank you for using Upendo Prompt. There is no reason to place this module on a page at this time, but it may be necessary in the future.</value>
  </data>
</root>